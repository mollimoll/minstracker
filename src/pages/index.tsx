import { signIn, signOut, useSession } from "next-auth/react";
import Head from "next/head";
import { useForm, useWatch, type Control } from "react-hook-form";
import { api } from "~/utils/api";

type FormValues = {
  minutesWorked: number;
  minutesGoal: number;
  workoutsPerWeek: number;
  weeksSkipped: number;
};

const weeksRemainingInYear = (date: Date) =>
  Math.floor(
    (new Date() - new Date(date.getFullYear(), 0, 0)) / 1000 / 60 / 60 / 24
  );

const MinutesPerWorkout = ({
  control,
}: {
  control: Control<FormValues, any>;
}) => {
  const minutesWorked = useWatch({
    control,
    name: "minutesWorked",
  });
  const workoutsPerWeek = useWatch({
    control,
    name: "workoutsPerWeek",
  });
  const minutesGoal = useWatch({
    control,
    name: "minutesGoal",
  });
  const weeksSkipped = useWatch({
    control,
    name: "weeksSkipped",
  });
  const d1 = new Date();
  const d2 = new Date(d1.getFullYear(), 11, 31);
  const weeksRemaining = Math.round((d2 - d1) / (7 * 24 * 60 * 60 * 1000));

  console.log("weeksRemaining", weeksRemaining);

  const minutesRemaining = minutesGoal - minutesWorked;
  const minutesPerWeek = Math.floor(
    minutesRemaining / (weeksRemaining - weeksSkipped)
  );
  const minutesPerWorkout = Math.floor(minutesPerWeek / workoutsPerWeek);

  return (
    <p className="col-span-2 text-center text-2xl text-white">
      Minutes per workout: {minutesPerWorkout}
    </p>
  );
};

export default function Home() {
  const hello = api.example.hello.useQuery({ text: "from tRPC" });
  const { register, control } = useForm<FormValues>({
    defaultValues: {
      minutesWorked: 0,
      minutesGoal: 6000,
      workoutsPerWeek: 3,
      weeksSkipped: 0,
    },
  });

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-black">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
            Minutes calculator
          </h1>
          <div className="grid grid-cols-1 items-center gap-4 sm:grid-cols-2 md:gap-8">
            <label
              htmlFor="minutesWorked"
              className="text-xl font-semibold text-white"
            >
              Minutes worked out this year
            </label>
            <input
              {...register("minutesWorked")}
              className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
              type="number"
              placeholder="Minutes worked out this year"
              min={0}
            />
            <label
              htmlFor="minutesGoal"
              className="text-xl font-semibold text-white"
            >
              Minutes goal for the year
            </label>
            <input
              {...register("minutesGoal")}
              className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
              type="number"
              placeholder="Minutes goal for the year"
              min={0}
            />
            <label
              htmlFor="workoutsPerWeek"
              className="text-xl font-semibold text-white"
            >
              Goal workouts per week
            </label>
            <input
              {...register("workoutsPerWeek")}
              className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
              type="number"
              placeholder="Goal workouts per week"
              min={0}
            />
            <label
              htmlFor="weeksSkipped"
              className="text-xl font-semibold text-white"
            >
              Number of weeks you may miss
            </label>
            <input
              {...register("weeksSkipped")}
              className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
              type="number"
              placeholder="Weeks skipped"
              min={0}
            />
            <MinutesPerWorkout control={control} />
          </div>
        </div>
      </main>
    </>
  );
}

function AuthShowcase() {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = api.example.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined }
  );

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl text-white">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => void signOut() : () => void signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
}
